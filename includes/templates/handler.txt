<?php
/*
Copyright: © 2009 WebSharks, Inc. ( coded in the USA )
<mailto:support@websharks-inc.com> <http://www.websharks-inc.com/>

Released under the terms of the GNU General Public License.
You should have received a copy of the GNU General Public License,
along with this software. In the main directory, see: /licensing/
If not, see: <http://www.gnu.org/licenses/>.
*/
/*
Direct access denial.
*/
if (realpath (__FILE__) === realpath ($_SERVER["SCRIPT_FILENAME"]))
	exit ("Do not access this file directly.");
/*
Quick Cache Constants:
Do NOT edit this file directly, it is re-built dynamically.
Constants can be overwritten by defining them in /wp-config.php.
Otherwise, use the options panel inside WordPress® to configure everything.
*/
if (!defined("QUICK_CACHE_ENABLED"))
	define("QUICK_CACHE_ENABLED", %%QUICK_CACHE_ENABLED%%);
/**/
if (!defined("QUICK_CACHE_ENABLE_DEBUGGING"))
	define("QUICK_CACHE_ENABLE_DEBUGGING", %%QUICK_CACHE_ENABLE_DEBUGGING%%);
/**/
if (!defined("QUICK_CACHE_DONT_CACHE_WHEN_LOGGED_IN"))
	define("QUICK_CACHE_DONT_CACHE_WHEN_LOGGED_IN", %%QUICK_CACHE_DONT_CACHE_WHEN_LOGGED_IN%%);
/**/
if (!defined("QUICK_CACHE_DONT_CACHE_QUERY_STRING_REQUESTS"))
	define("QUICK_CACHE_DONT_CACHE_QUERY_STRING_REQUESTS", %%QUICK_CACHE_DONT_CACHE_QUERY_STRING_REQUESTS%%);
/**/
if (!defined("QUICK_CACHE_ALLOW_BROWSER_CACHE"))
	define("QUICK_CACHE_ALLOW_BROWSER_CACHE", %%QUICK_CACHE_ALLOW_BROWSER_CACHE%%);
/**/
if (!defined("QUICK_CACHE_EXPIRATION"))
	define("QUICK_CACHE_EXPIRATION", %%QUICK_CACHE_EXPIRATION%%);
/**/
if (!defined("QUICK_CACHE_DONT_CACHE_THESE_URIS"))
	define("QUICK_CACHE_DONT_CACHE_THESE_URIS", "%%QUICK_CACHE_DONT_CACHE_THESE_URIS%%");
/**/
if (!defined("QUICK_CACHE_DONT_CACHE_THESE_REFS"))
	define("QUICK_CACHE_DONT_CACHE_THESE_REFS", "%%QUICK_CACHE_DONT_CACHE_THESE_REFS%%");
/**/
if (!defined("QUICK_CACHE_DONT_CACHE_THESE_AGENTS"))
	define("QUICK_CACHE_DONT_CACHE_THESE_AGENTS", "%%QUICK_CACHE_DONT_CACHE_THESE_AGENTS%%");
/**/
if (!defined("QUICK_CACHE_USE_FLOCK_OR_SEM"))
	define("QUICK_CACHE_USE_FLOCK_OR_SEM", "%%QUICK_CACHE_USE_FLOCK_OR_SEM%%");
/**/
if (!defined("QUICK_CACHE_VERSION_SALT"))
	define("QUICK_CACHE_VERSION_SALT", %%QUICK_CACHE_VERSION_SALT%%);
/*
Function handles cache building / cache serving.
Registers the output handler: ws_plugin__qcache_builder()
*/
if (!function_exists ("ws_plugin__qcache_handler"))
	{
		function ws_plugin__qcache_handler () /* The Quick Cache handler. */
			{
				if ($cache_allowed = $nocache_headers = QUICK_CACHE_ENABLED) /* Enabled? */
					{
						define ("QUICK_CACHE_TIMER", microtime (true)); /* Start the timer. */
						/**/
						define ("QUICK_CACHE_AUTO_CACHE_ENGINE", ($_SERVER["REMOTE_ADDR"] === $_SERVER["SERVER_ADDR"] && preg_match ("/Quick Cache \( Auto-Cache Engine \)/i", $_SERVER["HTTP_USER_AGENT"])));
						/**/
						if (QUICK_CACHE_AUTO_CACHE_ENGINE) /* Allows the Auto-Cache Engine to break the connection early to save time. */
							ignore_user_abort(true); /* Ignores user aborted requests, so the page can always finish loading. */
						/**/
						if (is_multisite () && preg_match ("/\/files\//i", $_SERVER["REQUEST_URI"])) /* Multisite files. */
							{
								$cache_allowed = $nocache_headers = false; /* Don't cache or send headers. */
							}
						/**/
						if ($nocache_headers && !QUICK_CACHE_ALLOW_BROWSER_CACHE && !$_GET["qcABC"])
							{
								header ("Expires: " . gmdate ("D, d M Y H:i:s", strtotime ("-1 week")) . " GMT");
								header ("Last-Modified: " . gmdate ("D, d M Y H:i:s") . " GMT");
								header ("Cache-Control: no-cache, must-revalidate, max-age=0");
								header ("Pragma: no-cache");
							}
						/**/
						if ($cache_allowed) /* Shave a little more processing time here; whenever caching is NOT allowed. */
							{
								if ($cache_allowed && ( (defined ("QUICK_CACHE_ALLOWED") && !QUICK_CACHE_ALLOWED) || (isset ($_SERVER["QUICK_CACHE_ALLOWED"]) && !$_SERVER["QUICK_CACHE_ALLOWED"]) || (isset ($_GET["qcAC"]) && !$_GET["qcAC"]) || defined ("DONOTCACHEPAGE")))
									{
										$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && preg_match ("/^CLI$/i", PHP_SAPI) && !QUICK_CACHE_AUTO_CACHE_ENGINE)
									{
										$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && $_SERVER["REMOTE_ADDR"] === $_SERVER["SERVER_ADDR"] && !QUICK_CACHE_AUTO_CACHE_ENGINE)
									{
										$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && preg_match ("/^(POST|PUT)$/i", $_SERVER["REQUEST_METHOD"]))
									{
										$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && (is_admin () || preg_match ("/\/wp-admin\//i", $_SERVER["REQUEST_URI"])))
									{
										$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && preg_match ("/\/(wp-app|wp-signup|wp-register|wp-activate|wp-login|xmlrpc)\.php/", $_SERVER["REQUEST_URI"]))
									{
										$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && defined ("SID") && SID) /* Possible Session. */
									{
										$cache_allowed = false; /* Sessions are used by some plugins. */
									}
								/**/
								if ($cache_allowed && QUICK_CACHE_DONT_CACHE_QUERY_STRING_REQUESTS && strlen ($_SERVER["QUERY_STRING"]) && !$_GET["qcAC"] && ! (count ($_GET) === 1 && isset ($_GET["qcABC"])))
									{
										$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && QUICK_CACHE_DONT_CACHE_THESE_AGENTS && !QUICK_CACHE_AUTO_CACHE_ENGINE)
									{
										if (strlen ($_SERVER["HTTP_USER_AGENT"]))
											if (preg_match (QUICK_CACHE_DONT_CACHE_THESE_AGENTS, $_SERVER["HTTP_USER_AGENT"]))
												$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && QUICK_CACHE_DONT_CACHE_THESE_REFS && !QUICK_CACHE_AUTO_CACHE_ENGINE)
									{
										if (strlen ($_SERVER["HTTP_REFERER"]))
											if (preg_match (QUICK_CACHE_DONT_CACHE_THESE_REFS, $_SERVER["HTTP_REFERER"]))
												$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && QUICK_CACHE_DONT_CACHE_THESE_URIS)
									{
										if (preg_match (QUICK_CACHE_DONT_CACHE_THESE_URIS, $_SERVER["REQUEST_URI"]))
											$cache_allowed = false;
									}
								/**/
								if ($cache_allowed && QUICK_CACHE_DONT_CACHE_WHEN_LOGGED_IN && is_array ($_COOKIE) && !empty ($_COOKIE) && is_array ($cookies = array ()))
									{
										$coma = "comment_author_"; /* This is hard-coded in. */
										$post = "wp-postpass"; /* Also hard-coded for protected posts. */
										$user = (defined ("USER_COOKIE")) ? USER_COOKIE : "wordpressuser_";
										$pass = (defined ("PASS_COOKIE")) ? PASS_COOKIE : "wordpresspass_";
										$auth = (defined ("AUTH_COOKIE")) ? AUTH_COOKIE : "wordpress_";
										$seca = (defined ("SECURE_AUTH_COOKIE")) ? SECURE_AUTH_COOKIE : "wordpress_sec_";
										$logd = (defined ("LOGGED_IN_COOKIE")) ? LOGGED_IN_COOKIE : "wordpress_logged_in_";
										$test = (defined ("TEST_COOKIE")) ? TEST_COOKIE : "wordpress_test_cookie";
										/**/
										$regx = "/^(" . preg_quote ($coma, "/") . "|" . preg_quote ($post, "/") . "|" . preg_quote ($user, "/") . "|" . preg_quote ($pass, "/") . "|" . preg_quote ($auth, "/") . "|" . preg_quote ($seca, "/") . "|" . preg_quote ($logd, "/") . "|" . preg_quote ($test, "/") . ")/";
										/**/
										foreach ($_COOKIE as $k => $v)
											if (preg_match ($regx, $k) && strlen ($v))
												$cookies[] = $k;
										/**/
										if (count ($cookies) > 0 && ! (count ($cookies) === 1 && $cookies[0] === $test))
											$cache_allowed = false;
									}
								/**/
								if ($cache_allowed) /* Construct a five part globbable cache file name. */
									{
										list ($multisite_path) = preg_split ("/\//", trim ($_SERVER["REQUEST_URI"], "/"), 2);
										$multisite_path = (strlen ($multisite_path)) ? "/" . $multisite_path . "/" : "/";
										if (!is_multisite () || (defined ("SUBDOMAIN_INSTALL") && SUBDOMAIN_INSTALL))
											$multisite_path = "/"; /* Single slash in this case. */
										/**/
										$md5_1 = md5 (QUICK_CACHE_VERSION_SALT . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
										$md5_2 = md5 (preg_replace ("/\:[0-9]+$/", "", $_SERVER["HTTP_HOST"]) . $_SERVER["REQUEST_URI"]);
										$md5_3 = md5 (preg_replace ("/\:[0-9]+$/", "", $_SERVER["HTTP_HOST"]) . $multisite_path);
										/**/
										define ("QUICK_CACHE_FILE", dirname (__FILE__) . "/cache/qc-c-" . $md5_1 . "-" . $md5_2 . "-" . $md5_3);
										define ("QUICK_CACHE_FILE_DESC", QUICK_CACHE_VERSION_SALT . " " . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]);
										/**/
										if (file_exists (QUICK_CACHE_FILE) && filemtime (QUICK_CACHE_FILE) >= strtotime ("-" . QUICK_CACHE_EXPIRATION . " seconds"))
											{
												list ($headers, $cache) = explode ("<!--headers-->", file_get_contents (QUICK_CACHE_FILE), 2);
												/**/
												$headers_list = headers_list (); /* An array of headers already sent ( or ready to be sent ) by PHP routines. */
												foreach (unserialize ($headers) as $header) /* Preserves original headers sent with this file. */
													if (!in_array ($header, $headers_list)) /* Avoiding duplicate headers. */
														header($header);
												/**/
												$total_time = number_format (microtime (true) - QUICK_CACHE_TIMER, 5, ".", "");
												/**/
												$cache .= "\n<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->";
												$cache .= "\n<!-- Quick Cache Is Fully Functional :-) ... A Quick Cache file was just served for ( " . QUICK_CACHE_FILE_DESC . " ) in " . $total_time . " seconds, on " . date ("M jS, Y \a\\t g:i a T") . ". -->";
												/**/
												exit ($cache); /* Exit with cache contents. */
											}
										else /* Else, we'll need to implement phase #2. */
											{
												function ws_plugin__qcache_builder ($buffer = FALSE)
													{
														if (defined ("QUICK_CACHE_ALLOWED") && !QUICK_CACHE_ALLOWED)
															return $buffer; /* Do NOT cache. */
														/**/
														else if (isset ($_SERVER["QUICK_CACHE_ALLOWED"]) && !$_SERVER["QUICK_CACHE_ALLOWED"])
															return $buffer; /* Do NOT cache. */
														/**/
														else if (isset ($_GET["qcAC"]) && !$_GET["qcAC"])
															return $buffer; /* Do NOT cache. */
														/**/
														else if (defined ("DONOTCACHEPAGE"))
															return $buffer; /* Do NOT cache. */
														/**/
														else if (!strlen ($buffer = trim ($buffer)))
															return $buffer; /* Do NOT cache. */
														/**/
														else if (strlen ($buffer) <= 2000 && preg_match ("/\<h1\>Error/i", $buffer))
															return $buffer; /* Do NOT cache. */
														/**/
														else if ($GLOBALS["QUICK_CACHE_STATUS"] && preg_match ("/^5/", $GLOBALS["QUICK_CACHE_STATUS"]))
															return $buffer; /* Do NOT cache. */
														/**/
														foreach (($headers = headers_list ()) as $header) /* Go through all headers. */
															/**/
															if (preg_match ("/^Retry-After\:/i", $header) || preg_match ("/^Status\: 5/i", $header))
																return $buffer; /* Do NOT cache. */
															/**/
															else if (preg_match ("/^Content-Type\:/i", $header))
																$content_type = $header; /* The "last" one. */
														/**/
														/* Disables caching when a PHP routine sets an incompatible Content-Type. */
														if ($content_type && !preg_match ("/xhtml|html|xml/i", $content_type))
															return $buffer; /* Do NOT cache. */
														/**/
														/* This is for the `Maintenance Mode` plugin. */
														/* <http://wordpress.org/extend/plugins/maintenance-mode/> */
														else if (function_exists ("is_maintenance") && is_maintenance ())
															return $buffer; /* Do NOT cache. */
														/**/
														/* This is for the `WP Maintenance Mode` plugin. */
														/* <http://wordpress.org/extend/plugins/wp-maintenance-mode/> */
														else if (function_exists ("did_action") && did_action ("wm_head"))
															return $buffer; /* Do NOT cache. */
														/**/
														if (!is_dir (dirname (__FILE__) . "/cache"))
															@mkdir (dirname (__FILE__) . "/cache", 0777, true);
														/**/
														if (is_dir (dirname (__FILE__) . "/cache") && is_writable (dirname (__FILE__) . "/cache"))
															{
																$total_time = number_format (microtime (true) - QUICK_CACHE_TIMER, 5, ".", "");
																/**/
																$cache = $buffer . "\n<!-- This Quick Cache file was built for ( " . QUICK_CACHE_FILE_DESC . " ) in " . $total_time . " seconds, on " . date ("M jS, Y \a\\t g:i a T") . ". -->";
																$cache .= "\n<!-- This Quick Cache file will automatically expire ( and be re-built automatically ) on " . date ("M jS, Y \a\\t g:i a T", strtotime ("+" . QUICK_CACHE_EXPIRATION . " seconds")) . " -->";
																/**/
																if (QUICK_CACHE_USE_FLOCK_OR_SEM === "sem" && function_exists ("sem_get") && ($mutex = @sem_get (1976, 1, 0644 | IPC_CREAT, 1)) && @sem_acquire ($mutex) && ($cached = true))
																	file_put_contents (QUICK_CACHE_FILE, serialize ($headers) . "<!--headers-->" . $cache) . sem_release ($mutex);
																/**/
																else if (($mutex = @fopen (dirname (__FILE__) . "/cache/qc-l-mutex.lock", "w")) && @flock ($mutex, LOCK_EX) && ($cached = true))
																	file_put_contents (QUICK_CACHE_FILE, serialize ($headers) . "<!--headers-->" . $cache) . flock ($mutex, LOCK_UN);
																/**/
																return ($cached) ? $cache : $buffer . "\n<!-- Quick Cache: failed to write cache, unable to obtain a mutex lock at the moment. Quick Cache will try again later. -->";
															}
														else /* We need to report that the cache/ directory is either non-existent ( and could not be created ) or it is not writable. */
															{
																return $buffer . "\n<!-- Quick Cache: failed to write cache. The cache/ directory is either non-existent ( and could not be created ) or it is not writable. -->";
															}
													}
												/**/
												ob_start ("ws_plugin__qcache_builder");
											}
									}
							}
					}
			}
	}
/**/
if (QUICK_CACHE_ENABLED) /* Only if enabled. */
	call_user_func ("ws_plugin__qcache_handler");
?>