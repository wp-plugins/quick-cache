<?php
/*
Copyright: © 2009 WebSharks, Inc. ( coded in the USA )
<mailto:support@websharks-inc.com> <http://www.websharks-inc.com/>

Released under the terms of the GNU General Public License.
You should have received a copy of the GNU General Public License,
along with this software. In the main directory, see: /licensing/
If not, see: <http://www.gnu.org/licenses/>.
*/
/*
Direct access denial.
*/
if (realpath (__FILE__) === realpath ($_SERVER["SCRIPT_FILENAME"]))
	exit;
/*
Quick Cache Constants:
Do NOT edit this file directly, it is re-built dynamically.
Constants can be overwritten by defining them in /wp-config.php.
Otherwise, use the options panel inside WordPress® to configure everything.
*/
if (!defined("QUICK_CACHE__ENABLED"))
	define("QUICK_CACHE__ENABLED", %%QUICK_CACHE__ENABLED%%);
/**/
if (!defined("QUICK_CACHE__ENABLE_DEBUGGING"))
	define("QUICK_CACHE__ENABLE_DEBUGGING", %%QUICK_CACHE__ENABLE_DEBUGGING%%);
/**/
if (!defined("QUICK_CACHE__DONT_CACHE_WHEN_LOGGED_IN"))
	define("QUICK_CACHE__DONT_CACHE_WHEN_LOGGED_IN", %%QUICK_CACHE__DONT_CACHE_WHEN_LOGGED_IN%%);
/**/
if (!defined("QUICK_CACHE__DONT_CACHE_QUERY_STRING_REQUESTS"))
	define("QUICK_CACHE__DONT_CACHE_QUERY_STRING_REQUESTS", %%QUICK_CACHE__DONT_CACHE_QUERY_STRING_REQUESTS%%);
/**/
if (!defined("QUICK_CACHE__ALLOW_BROWSER_CACHE"))
	define("QUICK_CACHE__ALLOW_BROWSER_CACHE", %%QUICK_CACHE__ALLOW_BROWSER_CACHE%%);
/**/
if (!defined("QUICK_CACHE__EXPIRATION"))
	define("QUICK_CACHE__EXPIRATION", %%QUICK_CACHE__EXPIRATION%%);
/**/
if (!defined("QUICK_CACHE__DONT_CACHE_THESE_URIS"))
	define("QUICK_CACHE__DONT_CACHE_THESE_URIS", "%%QUICK_CACHE__DONT_CACHE_THESE_URIS%%");
/**/
if (!defined("QUICK_CACHE__DONT_CACHE_THESE_REFS"))
	define("QUICK_CACHE__DONT_CACHE_THESE_REFS", "%%QUICK_CACHE__DONT_CACHE_THESE_REFS%%");
/**/
if (!defined("QUICK_CACHE__DONT_CACHE_THESE_AGENTS"))
	define("QUICK_CACHE__DONT_CACHE_THESE_AGENTS", "%%QUICK_CACHE__DONT_CACHE_THESE_AGENTS%%");
/**/
if (!defined("QUICK_CACHE__USE_FLOCK_OR_SEM"))
	define("QUICK_CACHE__USE_FLOCK_OR_SEM", "%%QUICK_CACHE__USE_FLOCK_OR_SEM%%");
/**/
if (!defined("QUICK_CACHE__VERSION_SALT"))
	define("QUICK_CACHE__VERSION_SALT", %%QUICK_CACHE__VERSION_SALT%%);
/*
Function that handles cache building & serving.
Also register the output handler: QUICK_CACHE__builder().
*/
function QUICK_CACHE__handler () /* Inner function: QUICK_CACHE__builder(). */
	{
		if ($cache_allowed = $nocache_headers = QUICK_CACHE__ENABLED) /* Enabled? */
			{
				define ("QUICK_CACHE__TIMER", microtime (true)); /* Start the timer. */
				/**/
				define ("QUICK_CACHE__AUTO_CACHE_ENGINE", ($_SERVER["REMOTE_ADDR"] === $_SERVER["SERVER_ADDR"] && preg_match ("/Quick Cache \( Auto-Cache Engine \)/i", $_SERVER["HTTP_USER_AGENT"])));
				/**/
				if (QUICK_CACHE__AUTO_CACHE_ENGINE) /* Allows the Auto-Cache Engine to break the connection early to save time. */
					ignore_user_abort (true); /* Ignores user aborted requests, so the page can always finish loading. */
				/**/
				if (preg_match ("/\/files\//i", $_SERVER["REQUEST_URI"]) && file_exists (ABSPATH . "wpmu-settings.php"))
					{
						$cache_allowed = $nocache_headers = false; /* Don't cache or send headers for WPMU /files. */
					}
				/**/
				if ($nocache_headers && !QUICK_CACHE__ALLOW_BROWSER_CACHE && !$_GET["qcABC"])
					{
						header ("Expires: " . gmdate ("D, d M Y H:i:s", strtotime ("-1 week")) . " GMT");
						header ("Last-Modified: " . gmdate ("D, d M Y H:i:s") . " GMT");
						header ("Cache-Control: no-cache, must-revalidate, max-age=0");
						header ("Pragma: no-cache");
					}
				/**/
				if ($cache_allowed && ((defined ("QUICK_CACHE_ALLOWED") && !QUICK_CACHE_ALLOWED)/**/
				|| (isset ($_SERVER["QUICK_CACHE_ALLOWED"]) && !$_SERVER["QUICK_CACHE_ALLOWED"])/**/
				|| (isset ($_GET["qcAC"]) && !$_GET["qcAC"])/**/
				|| defined ("DONOTCACHEPAGE")))
					{
						$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && preg_match ("/^CLI$/i", PHP_SAPI) && !QUICK_CACHE__AUTO_CACHE_ENGINE)
					{
						$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && $_SERVER["REMOTE_ADDR"] === $_SERVER["SERVER_ADDR"] && !QUICK_CACHE__AUTO_CACHE_ENGINE)
					{
						$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && preg_match ("/^(POST|PUT)$/i", $_SERVER["REQUEST_METHOD"]))
					{
						$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && preg_match ("/\/wp-login\.php/i", $_SERVER["REQUEST_URI"]))
					{
						$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && preg_match ("/\/wp-admin\//i", $_SERVER["REQUEST_URI"]))
					{
						$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && QUICK_CACHE__DONT_CACHE_QUERY_STRING_REQUESTS && strlen ($_SERVER["QUERY_STRING"])/**/
				&& !$_GET["qcAC"] && !(count ($_GET) === 1 && isset ($_GET["qcABC"])))
					{
						$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && QUICK_CACHE__DONT_CACHE_THESE_AGENTS && !QUICK_CACHE__AUTO_CACHE_ENGINE)
					{
						if (strlen ($_SERVER["HTTP_USER_AGENT"]))
							if (preg_match (QUICK_CACHE__DONT_CACHE_THESE_AGENTS, $_SERVER["HTTP_USER_AGENT"]))
								$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && QUICK_CACHE__DONT_CACHE_THESE_REFS)
					{
						if (strlen ($_SERVER["HTTP_REFERER"]))
							if (preg_match (QUICK_CACHE__DONT_CACHE_THESE_REFS, $_SERVER["HTTP_REFERER"]))
								$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && QUICK_CACHE__DONT_CACHE_THESE_URIS)
					{
						if (preg_match (QUICK_CACHE__DONT_CACHE_THESE_URIS, $_SERVER["REQUEST_URI"]))
							$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && QUICK_CACHE__DONT_CACHE_WHEN_LOGGED_IN && is_array ($_COOKIE) && !empty ($_COOKIE) && is_array ($cookies = array ()))
					{
						$coma = "comment_author_"; /* This is hard-coded in. */
						$post = "wp-postpass"; /* Also hard-coded for protected posts. */
						$user = (defined ("USER_COOKIE")) ? USER_COOKIE : "wordpressuser_";
						$pass = (defined ("PASS_COOKIE")) ? PASS_COOKIE : "wordpresspass_";
						$auth = (defined ("AUTH_COOKIE")) ? AUTH_COOKIE : "wordpress_";
						$seca = (defined ("SECURE_AUTH_COOKIE")) ? SECURE_AUTH_COOKIE : "wordpress_sec_";
						$logd = (defined ("LOGGED_IN_COOKIE")) ? LOGGED_IN_COOKIE : "wordpress_logged_in_";
						$test = (defined ("TEST_COOKIE")) ? TEST_COOKIE : "wordpress_test_cookie";
						/**/
						$regx = "/^(" . preg_quote ($coma, "/") . "|" . preg_quote ($post, "/") . "|" . preg_quote ($user, "/") . "|" . preg_quote ($pass, "/") . "|" . preg_quote ($auth, "/") . "|" . preg_quote ($seca, "/") . "|" . preg_quote ($logd, "/") . "|" . preg_quote ($test, "/") . ")/";
						/**/
						foreach ($_COOKIE as $k => $v)
							if (preg_match ($regx, $k) && strlen ($v))
								$cookies[] = $k;
						/**/
						if (count ($cookies) > 0 && !(count ($cookies) === 1 && $cookies[0] === $test))
							$cache_allowed = false;
					}
				/**/
				if ($cache_allowed && file_exists (dirname (__FILE__) . "/cache/" . md5 (QUICK_CACHE__VERSION_SALT . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"])) && filemtime (dirname (__FILE__) . "/cache/" . md5 (QUICK_CACHE__VERSION_SALT . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"])) >= strtotime ("-" . QUICK_CACHE__EXPIRATION . " seconds"))
					{
						list ($headers, $cache) = explode ("<!--headers-->", file_get_contents (dirname (__FILE__) . "/cache/" . md5 (QUICK_CACHE__VERSION_SALT . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"])), 2);
						/**/
						$headers_list = headers_list (); /* An array of headers already sent ( or ready to be sent ) by PHP routines. */
						foreach (unserialize ($headers) as $header) /* This preserves the original headers sent with this file. */
							if (!preg_match ("/^Last-Modified\:/i", $header)) /* Don't send the Last-Modified header again. */
								if (!in_array ($header, $headers_list)) /* Avoids all other duplicate headers. */
									header ($header);
						/**/
						$total_time = number_format (microtime (true) - QUICK_CACHE__TIMER, 5, ".", "");
						/**/
						$cache .= "\n<!-- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->";
						$cache .= "\n<!-- Quick Cache Is Fully Functional :-) ... A Quick Cache file was just served for ( " . QUICK_CACHE__VERSION_SALT . " " . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"] . " ) in " . $total_time . " seconds, on " . date ("M jS, Y \a\\t g:i a T") . ". -->";
						/**/
						echo $cache;
						/**/
						exit;
					}
				/**/
				else if ($cache_allowed) /* Buffer... */
					{
						if (!defined ("QUICK_CACHE_ALLOWED"))
							define ("QUICK_CACHE_ALLOWED", true);
						/**/
						if (!isset ($_SERVER["QUICK_CACHE_ALLOWED"]))
							$_SERVER["QUICK_CACHE_ALLOWED"] = true;
						/**/
						function QUICK_CACHE__builder ($buffer)
							{
								if (!strlen ($buffer = trim ($buffer)))
									return $buffer; /* Do not cache empty pages. */
								else if (!QUICK_CACHE_ALLOWED || defined ("DONOTCACHEPAGE"))
									return $buffer; /* Do NOT cache if these are true. */
								else if (!$_SERVER["QUICK_CACHE_ALLOWED"])
									return $buffer; /* Do NOT cache. */
								/**/
								foreach (($headers = headers_list ()) as $header)
									if (preg_match ("/^Content-Type\:/i", $header))
										$content_type = $header; /* < The last Content-Type header. */
								/* Disables caching when a PHP routine sets an incompatible Content-Type. */
								if ($content_type && !preg_match ("/xhtml|html|xml/i", $content_type))
									return $buffer; /* Do NOT cache. */
								/**/
								if (!is_dir (dirname (__FILE__) . "/cache"))
									@mkdir (dirname (__FILE__) . "/cache", 0777, true);
								/**/
								if (is_dir (dirname (__FILE__) . "/cache") && is_writable (dirname (__FILE__) . "/cache"))
									{
										$total_time = number_format (microtime (true) - QUICK_CACHE__TIMER, 5, ".", "");
										/**/
										$cache = $buffer . "\n<!-- This Quick Cache file was built for ( " . QUICK_CACHE__VERSION_SALT . " " . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"] . " ) in " . $total_time . " seconds, on " . date ("M jS, Y \a\\t g:i a T") . ". -->";
										$cache .= "\n<!-- This Quick Cache file will automatically expire ( and be re-built automatically ) on " . date ("M jS, Y \a\\t g:i a T", strtotime ("+" . QUICK_CACHE__EXPIRATION . " seconds")) . " -->";
										/**/
										if (QUICK_CACHE__USE_FLOCK_OR_SEM === "sem" && function_exists ("sem_get") && ($mutex = @sem_get (1976, 1, 0644 | IPC_CREAT, 1)) && @sem_acquire ($mutex) && ($cached = true))
											file_put_contents (dirname (__FILE__) . "/cache/" . md5 (QUICK_CACHE__VERSION_SALT . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]), serialize ($headers) . "<!--headers-->" . $cache)/**/
											. sem_release ($mutex); /* Then release the semaphore. */
										else if (($mutex = @fopen (dirname (__FILE__) . "/cache/mutex.lock", "w")) && @flock ($mutex, LOCK_EX) && ($cached = true))
											file_put_contents (dirname (__FILE__) . "/cache/" . md5 (QUICK_CACHE__VERSION_SALT . $_SERVER["HTTP_HOST"] . $_SERVER["REQUEST_URI"]), serialize ($headers) . "<!--headers-->" . $cache)/**/
											. flock ($mutex, LOCK_UN); /* Then release the lock. */
										/**/
										return ($cached) ? $cache : $buffer . "\n<!-- Quick Cache: failed to write cache, unable to obtain a mutex lock at the moment. Quick Cache will try again later. -->";
									}
								else /* We need to report that the cache/ directory is either non-existent ( and could not be created ) or it is not writable. */
									{
										return $buffer . "\n<!-- Quick Cache: failed to write cache. The cache/ directory is either non-existent ( and could not be created ) or it is not writable. -->";
									}
							}
						/**/
						ob_start ("QUICK_CACHE__builder");
					}
			}
	}
/**/
if (QUICK_CACHE__ENABLED) /* If enabled. */
	call_user_func ("QUICK_CACHE__handler");
?>