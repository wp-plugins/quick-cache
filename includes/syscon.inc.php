<?php
/*
Copyright: © 2009 WebSharks, Inc. ( coded in the USA )
<mailto:support@websharks-inc.com> <http://www.websharks-inc.com/>

Released under the terms of the GNU General Public License.
You should have received a copy of the GNU General Public License,
along with this software. In the main directory, see: /licensing/
If not, see: <http://www.gnu.org/licenses/>.
*/
/*
WARNING: This is a system configuration file, please DO NOT EDIT this file directly!
... Instead, use the plugin options panel in WordPress® to override these settings.
*/
/*
Direct access denial.
*/
if (realpath (__FILE__) === realpath ($_SERVER["SCRIPT_FILENAME"]))
	exit;
/*
Detect if we are inside an MU installation.
*/
if (($GLOBALS["WS_PLUGIN__"]["qcache"]["c"]["is_wpmu"] = function_exists ("wpmu_current_site"))/**/
&& (file_exists (dirname (dirname (__FILE__)) . "/wpmu.farm") || file_exists (TEMPLATEPATH . "/wpmu.farm")))
	$GLOBALS["WS_PLUGIN__"]["qcache"]["c"]["is_wpmu_farm"] = true; /* Requires /wpmu.farm file. */
/*
Determine the full url to the directory this plugin resides in.
*/
$GLOBALS["WS_PLUGIN__"]["qcache"]["c"]["dir_url"] = WP_CONTENT_URL . /* URL to the plugin directory. */
preg_replace ("/^(.*?)(\/" . preg_quote (basename (WP_CONTENT_DIR), "/") . ")/", "", dirname (dirname (__FILE__)));
/*
Check if the plugin has been configured *should be set after the first config via options panel*.
*/
$GLOBALS["WS_PLUGIN__"]["qcache"]["c"]["configured"] = get_option ("ws_plugin__qcache_configured");
/*
Configure the right menu options panel for this software.
*/
$GLOBALS["WS_PLUGIN__"]["qcache"]["c"]["menu-r"] = array ("tools" => true, "tips" => false, "donations" => true);
/*
Configure the file modification time for the syscon.inc.php file.
*/
$GLOBALS["WS_PLUGIN__"]["qcache"]["c"]["filemtime"] = filemtime (__FILE__);
/*
Configure & validate all of the plugin options; and set their defaults.
*/
function ws_plugin__qcache_configure_options_and_their_defaults ($options = FALSE) /* Can also be used to merge options with defaults. */
	{
		/* Here we build the default options array, which will be merged with the user options.
		It is important to note that sometimes default options may not or should not be pre-filled on an options form.
		These defaults are for the system to use in various ways, we may choose not to pre-fill certain fields.
		In other words, some defaults may be used internally, but to the user, the option will be empty. */
		$default_options = array ( /* Please comment each line for clarity, it is easy to forget things. */
		/**/
		"options_version" => "1.0", /* Used internally to keep runtime files up-to-date. */
		/**/
		"enabled" => "0", /* Whether or not quick cache has been enabled. True or false here. */
		"dont_cache_when_logged_in" => "1", /* Cache pages for user who are logged in? True or false. */
		"dont_cache_query_string_requests" => "1", /* Cache page that contain a query string? True or false. */
		"dont_cache_these_agents" => "w3c_validator", /* User agents not to cache. This is a regex pattern. */
		"dont_cache_these_uris" => "wp-app\nwp-admin\nwp-login\nxmlrpc.php", /* Regex URIs not to cache. */
		"use_flock_or_sem" => "sem", /* Use flock() or should we use semiaphores? Please type flock or sem. */
		"expiration" => "3600", /* How long are cache files good for? This number is in seconds please. */
		"allow_browser_cache" => "0", /* Allow the browser to cache a cached file? Recommended false. */
		"version_salt" => "", /* Multiple versions of each page can be cached using a salt in the mix. */
		"enable_debugging" => "0", /* Enable the built-in debugging routines for the cache system. */
		"clear_on_update" => "single"); /* Clear the cache on update? This can be none, single, or all. */
		/*
		Here they are merged. user options will overwrite some or all default values. 
		*/
		$GLOBALS["WS_PLUGIN__"]["qcache"]["o"] = array_merge ($default_options, (($options !== false) ? (array)$options : (array)get_option ("ws_plugin__qcache_options")));
		/*
		Validate each option, possibly reverting back to the default value if invalid.
		Also check if options were passed in on some of these, in case empty values are to be allowed. 
		*/
		foreach ($GLOBALS["WS_PLUGIN__"]["qcache"]["o"] as $key => &$value)
			{
				if (!is_array ($value))
					$value = trim (stripslashes ($value));
				else /* A string, or an array of strings. */
					foreach ($value as $k => $v)
						$value[$k] = trim (stripslashes ($v));
				/**/
				if (!isset ($default_options[$key]))
					unset ($GLOBALS["WS_PLUGIN__"]["qcache"]["o"][$key]);
				/**/
				else if ($key === "enabled" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "dont_cache_when_logged_in" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "dont_cache_query_string_requests" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "dont_cache_these_agents" && !is_string ($value))
					$value = $default_options[$key];
				/**/
				else if ($key === "dont_cache_these_uris" && !is_string ($value))
					$value = $default_options[$key];
				/**/
				else if ($key === "use_flock_or_sem" && (!is_string ($value) || !preg_match ("/^(flock|sem)$/", $value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "expiration" && (!is_string ($value) || !is_numeric ($value) || $value < 1))
					$value = $default_options[$key];
				/**/
				else if ($key === "allow_browser_cache" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "version_salt" && (!is_string ($value) || !is_string ($value = trim ($value, " ."))))
					$value = $default_options[$key];
				/**/
				else if ($key === "enable_debugging" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "clear_on_update" && (!is_string ($value) || !preg_match ("/^(none|single|all)$/", $value)))
					$value = $default_options[$key];
			}
		/**/
		return $GLOBALS["WS_PLUGIN__"]["qcache"]["o"];
	}
/*
Now lets call the function.
*/
call_user_func ("ws_plugin__qcache_configure_options_and_their_defaults");
?>